/*
 * <one line to give the program's name and a brief idea of what it does.>
 * Copyright (C) 2016  <copyright holder> <email>
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */



#include "PointcloudMapping.h"

#include <opencv2/core/eigen.hpp>


int currentloopcount = 0;

void PointCloudMapping::setCyOffset(double offset){
    mCyOffset = offset;
}
/*
 *
 * @param resolution_ :体素大小分辨率，分辨率越小，单个体素越小
 * @param meank_ ： meank_ 为在进行统计时考虑查询邻近点个数
 * @param thresh_：设置距离阈值，其公式是 mean + global stddev_mult * global stddev，即mean+1.0*stddev
 * @return ：无
 */
PointCloudMapping::PointCloudMapping(double resolution_ = 0.01,double meank_ = 50,double thresh_ = 1.0)
{
    this->resolution = resolution_;//分辨率
    this->meank = thresh_;
    this->thresh = thresh_;
    loopbusy = 0;
    statistical_filter.setMeanK(meank);//统计估计滤波参数
    statistical_filter.setStddevMulThresh(thresh);
    voxel.setLeafSize( resolution, resolution, resolution);//设置每个体素子叶分辨率
    globalMap = boost::make_shared< PointCloud >( );

    viewerThread = make_shared<thread>( bind(&PointCloudMapping::viewer, this ) );
}

/*
 * void PointCloudMapping::shutdown()
 * \brief 关闭建图线程
 */
void PointCloudMapping::shutdown()
{
    {
        unique_lock<mutex> lck(shutDownMutex);
        shutDownFlag = true;
        keyFrameUpdated.notify_one();
    }
    //等待PointCloudMapping_viewer 本线程执行结束再执行系统主线程
    viewerThread->join();
}

//插入关键帧
/*
 *
 * @param kf    关键帧
 * @param color 关键帧彩色图
 * @param depth 关键帧深度图
 * @param idk   第idk个关键帧
 * @param vpKFs 获取全部关键帧
 * @function    在点云地图里插入关键帧
 */
void PointCloudMapping::insertKeyFrame(KeyFrame* kf, cv::Mat& color, cv::Mat& depth,int idk,vector<KeyFrame*> vpKFs)
{
static float  r[] = {0,0,1,-1,0,0,0,-1,0};
    cout<<"receive a keyframe, id = "<<idk<<" 第"<<kf->mnId<<"个"<<endl;
    //cout<<"vpKFs数量"<<vpKFs.size()<<endl;
    unique_lock<mutex> lck(keyframeMutex);
    keyframes.push_back( kf );
    currentvpKFs = vpKFs;
    //colorImgs.push_back( color.clone() );
    //depthImgs.push_back( depth.clone() );
    myPointCloud mypointcloud;
    mypointcloud.pcID = idk;
    mypointcloud.T = ORB_SLAM2::Converter::toSE3Quat( kf->GetPose() );//获取关键帧位姿
// // transform to ROS
//     cv::Mat R = kf->GetRotation();
//     R = R.inv();
//     vector<float> q = Converter::toQuaternion(R);
//     cv::Mat t = kf->GetCameraCenter();
//     Eigen::Quaterniond q_2(q[3], q[2], -q[0], -q[1]);
//     q_2.normalize();
//     Eigen::Matrix3d R_2 = q_2.toRotationMatrix();
//     Eigen::Vector3d t_2 = Eigen::Vector3d(t.at<float>(2), -t.at<float>(0), -t.at<float>(1));
//     cv::Mat m1,m2;
//     m1.resize(3,3);
//     m2.resize(3,1);
//     cv::eigen2cv(R_2,m1);
//     cv::eigen2cv(t_2,m2);
//     cv::Mat T_4 ;
//     T_4.resize(3,4);
//     m1.copyTo(T_4.rowRange(0,3).colRange(0,3));
//     m2.copyTo(T_4.rowRange(0,3).colRange(3,4));
    cv::Mat Rr(3,3,kf->GetPose().type(),r),T_4=kf->GetPose().t();
    //cv::Mat orb2ros_rotation(3,3,kf->GetPose().type()),orb2ros_translation(1,3,kf->GetPose().type());
    T_4.rowRange(0,3).colRange(0,3) = Rr * T_4.rowRange(0,3).colRange(0,3);
    T_4.rowRange(0,3).colRange(3,4) = Rr * T_4.rowRange(0,3).colRange(3,4);
    mypointcloud.T = ORB_SLAM2::Converter::toSE3Quat(T_4.t());
    //test
    cout<<"generating"<<endl;
    mypointcloud.pcE = generatePointCloud(kf,color,depth);//迭代关键帧点云
    mypointclouds.push_back(mypointcloud);
    keyFrameUpdated.notify_one();//通知线程开锁
    cout<<"receive ok"<<endl;
}

/**
 *
 * @param kf    关键帧
 * @param color 彩色图
 * @param depth 深度图
 * @return 关键帧点云
 */
pcl::PointCloud< PointCloudMapping::PointT >::Ptr PointCloudMapping::generatePointCloud(KeyFrame* kf, cv::Mat& color, cv::Mat& depth)//,Eigen::Isometry3d T
{
    //新建一个点云// point cloud is null ptr
    cout<<"generating cloud"<<endl;
    PointCloud::Ptr tmp( new PointCloud() );
    //testing
    //return tmp;
    //对点云进行
    for ( int m=0; m<depth.rows; m+=2 )
    {
        for ( int n=0; n<depth.cols; n+=2 )
        {
            float d = depth.ptr<float>(m)[n];//获取（m,n）处的深度值
            if (d < 0.01 || d > 5 )//滤除设备可靠深度范围之外点
                continue;
            PointT p;
            
            //相机模型，只计算关键帧的点云
            //座标系与pcl座标系相反，所以可以p.z=-d
            double ros_x,ros_y,ros_z;
            p.z = d;
            p.x = ( n - kf->cx) * p.z / kf->fx;
            p.y = ( m - kf->cy-mCyOffset) * p.z / kf->fy;
            //orb coordinate ok
            ros_x = p.z;
            ros_y = -p.x;
            ros_z = -p.y;
            // p.x = ros_x;
            // p.y = ros_y;
            // p.z = ros_z;
            //彩色图计算点云颜色
            p.b = color.ptr<uchar>(m)[n*3];
            p.g = color.ptr<uchar>(m)[n*3+1];
            p.r = color.ptr<uchar>(m)[n*3+2];

            tmp->points.push_back(p);
        }
    }
    cout<<"generate ok"<<endl;
    //cout<<"generate point cloud for kf "<<kf->mnId<<", size="<<cloud->points.size()<<endl;
    return tmp;
}

/*
 * @brief 显示点云线程
 */
void PointCloudMapping::viewer()
{
    //创建显示点云窗口
    pcl::visualization::CloudViewer viewer("viewer");
    while(1)
    {

        {
            unique_lock<mutex> lck_shutdown( shutDownMutex );
            if (shutDownFlag)
            {
                cout<<"cloud viewer has been shutDown"<<endl;
                break;
            }
        }
        {
            unique_lock<mutex> lck_keyframeUpdated( keyFrameUpdateMutex );
           // cout<<"wait for keyframeUpdate"<<endl;
            keyFrameUpdated.wait( lck_keyframeUpdated );
        }

        // keyframe is updated
        size_t N=0;
        {
            unique_lock<mutex> lck( keyframeMutex );
            N = keyframes.size();
        }
        if(loopbusy || bStop)
        {
            //cout<<"loopbusy || bStop"<<endl;
            //cout<<"now loopbusy  or bstop"<<loopbusy<<" "<<bStop<<endl;
            continue;
        }
       // cout<<lastKeyframeSize<<"    "<<N<<endl;
        if(lastKeyframeSize == N)
            cloudbusy = false;
        //cout<<"待处理点云个数 = "<<N<<endl;
        cloudbusy = true;
        {

            N = min(N,mypointclouds.size());
           // cout<<"begin! "<<N<<endl;
            for ( size_t i=lastKeyframeSize; i<N ; i++ )
            {

                cout<<"trying "<<i<<endl;
                PointCloud::Ptr p (new PointCloud),tmp(new PointCloud),tmp2(new PointCloud);
                //将点云数据转换成ascii码形式存储在pcd文件中
                //1、源点云   2、转变后的点云   3、位姿变换矩阵
                if (mypointclouds.at(i).pcID != -1)
                    pcl::transformPointCloud( *(mypointclouds[i].pcE), *p, mypointclouds[i].T.inverse().matrix());
                else 
                    continue;
                cout<<"finish "<<i<<endl;
                //  转换后的点云叠加存储在globalMap中
                {
                    std::unique_lock<std::mutex> locker(mPointCloudMtx);         
                    statistical_filter.setInputCloud(p); 
                    statistical_filter.filter(*tmp);
                    (*globalMap) += *p;
                    voxel.setInputCloud( globalMap );
                    voxel.filter(*tmp2);
                    globalMap->swap(*tmp2);
                }
                //globalMap->
                cout<<" add "<<i<<endl;
            }
        }
        // // depth filter and statistical removal
        // //这里的滤波只是显示上的滤波
        // PointCloud::Ptr tmp1 ( new PointCloud );
        // {
        //         std::unique_lock<std::mutex> locker(mPointCloudMtx);
        //         statistical_filter.setInputCloud(globalMap);    //对globalMap进行统计学去噪
        //         statistical_filter.filter( *tmp1 );             // 执行去噪计算并保存点到 tmp1
        // }
        // //体素滤波器voxel filter进行降采样
        // PointCloud::Ptr tmp(new PointCloud());
        // voxel.setInputCloud( tmp1 );
        {
            std::unique_lock<std::mutex> locker(mPointCloudMtx);
            //voxel.filter( *globalMap );
            //globalMap->swap( *tmp );
            cout<<"showing cloud"<<endl;
            viewer.showCloud( globalMap );

            cout<<"show global map, size="<<N<<"   "<<globalMap->points.size()<<endl;
        }
        lastKeyframeSize = N;
        cloudbusy = false;

    }
}

/*
 * 保存pcd地图
 */
void PointCloudMapping::save()
{
    std::unique_lock<std::mutex> locker(mPointCloudMtx);
    pcl::io::savePCDFile( "~/result.pcd", *globalMap );
    cout<<"globalMap save finished"<<endl;
}

/*
 * 更新点云
 */
void PointCloudMapping::updatecloud()
{
static float  r[] = {0,0,1,-1,0,0,0,-1,0};
    if(!cloudbusy)
    {
        loopbusy = true;
        cout<<"startloopmappoint"<<endl;
        PointCloud::Ptr tmp1(new PointCloud);
        for (int i=0;i<currentvpKFs.size();i++)
        {
            for (int j=0;j<mypointclouds.size();j++)
            {
                if(mypointclouds[j].pcID==currentvpKFs[i]->mnFrameId)
                {
                    //Eigen::Isometry3d T = ORB_SLAM2::Converter::toSE3Quat(currentvpKFs[i]->GetPose() ); //[todo] cordinate change
                    KeyFrame* &kf = currentvpKFs[i];
                     cv::Mat Rr(3,3,kf->GetPose().type(),r),T_4=kf->GetPose().t();
                    //cv::Mat orb2ros_rotation(3,3,kf->GetPose().type()),orb2ros_translation(1,3,kf->GetPose().type());
                    T_4.rowRange(0,3).colRange(0,3) = Rr * T_4.rowRange(0,3).colRange(0,3);
                    T_4.rowRange(0,3).colRange(3,4) = Rr * T_4.rowRange(0,3).colRange(3,4);
                    Eigen::Isometry3d T = ORB_SLAM2::Converter::toSE3Quat(T_4.t());
                    PointCloud::Ptr cloud(new PointCloud);
                    pcl::transformPointCloud( *mypointclouds[j].pcE, *cloud, T.inverse().matrix());
                    *tmp1 +=*cloud;
                    continue;
                }
            }
        }
        
        cout<<"finishloopmap"<<endl;
        PointCloud::Ptr tmp2(new PointCloud());
        voxel.setInputCloud( tmp1 );
        voxel.filter( *tmp2 );
        {
            std::unique_lock<std::mutex> locker(mPointCloudMtx);
            globalMap->swap( *tmp2 );
        }
        loopbusy = false;
        loopcount++;
        

    }
}

//获取全局点云地图点，智能指针，return 回来
/**
 * @brief  获取全局点云智能指针，全局点云使用时需要对mPointCloudMtx上锁
 * 
 * @return pcl::PointCloud<PointCloudMapping::PointT>::Ptr 
 */
pcl::PointCloud<PointCloudMapping::PointT>::Ptr PointCloudMapping::getGlobalMap() {
    return this->globalMap;
}